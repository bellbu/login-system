plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.0'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

def frontendDir = "$projectDir/src/main/frontend"  // React 프로젝트의 경로 설정

sourceSets { // Spring Boot 리소스 설정
    main {
        resources { srcDirs = ["$projectDir/src/main/resources"] // 리소스 경로를 설정
        }
    }
}

processResources { // Spring Boot 리소스 처리 작업 실행
    dependsOn "copyReactBuildFiles" // copyReactBuildFiles 작업이 성공적으로 완료된 후에만 processResources 실행
}

task installReact(type: Exec) { // React 의존성 설치 및 취약점 수정
    workingDir "$frontendDir" // 작업 디렉토리 설정
    inputs.dir "$frontendDir" // 입력 디렉토리 설정 (React 디렉토리에 변경이 없으면 작업 생략)
    group = BasePlugin.BUILD_GROUP // Gradle 빌드 작업 그룹에 해당 작업을 포함시킴
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "audit", "fix" // npm audit fix: 취약점 수정
        commandLine 'npm.cmd', 'install' }  // npm install: package.json 파일에 정의된 의존성 설치
    else {
        commandLine "npm", "audit", "fix" commandLine 'npm', 'install'
    }
}

task buildReact(type: Exec) { // buildReact(type: Exec): 빌드 실행
    dependsOn "installReact" // installReact 작업이 성공적으로 완료된 후에만 buildReact 실행
    workingDir "$frontendDir"  // 작업 디렉토리 설정
    inputs.dir "$frontendDir"  // 입력 디렉토리 설정 (React 디렉토리에 변경이 없으면 작업 생략)
    group = BasePlugin.BUILD_GROUP  // Gradle 빌드 작업 그룹에 해당 작업을 포함시킴
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "run-script", "build" // npm run build: React 프로젝트 빌드 실행
    } else {
        commandLine "npm", "run-script", "build"
    }
}

task copyReactBuildFiles(type: Copy) { // copyReactBuildFiles(type: Copy): React 발드 결과물을 Spring Boot로 복사
    dependsOn "buildReact" // buildReact 작업이 성공적으로 완료된 후에만 copyReactBuildFiles 실행
    from "$frontendDir/build"  // 복사할 파일의 원본 디렉토리 지정
    into "$projectDir/src/main/resources/static" // 복사된 파일의 대상 디렉토리를 지정
}